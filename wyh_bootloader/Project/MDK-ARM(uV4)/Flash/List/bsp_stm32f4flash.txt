; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_stm32f4flash.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_stm32f4flash.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\RL-ARM\Driver -I..\..\RL-ARM\Config -I..\..\RL-ARM\RL-RTX\inc -I..\..\User\libapp -I..\..\User\bsp\inc -I..\..\User\bsp -I..\..\User -I..\..\Libraries\STM32_USB_Device_Library\Class\dfu\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -D__MICROLIB -D__UVISION_VERSION=518 -D_RTE_ -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\bsp_stm32f4flash.crf ..\..\User\bsp\bsp_stm32f4flash.c]
                          THUMB

                          AREA ||i.STM32F4FLASH_CheckEmpty||, CODE, READONLY, ALIGN=2

                  STM32F4FLASH_CheckEmpty PROC
;;;35     
;;;36     FLASH_Status STM32F4FLASH_CheckEmpty(u32 StartAddr,u32 EndAddr)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;37     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;38     	FLASH_Status status = FLASH_COMPLETE;
000008  2609              MOVS     r6,#9
;;;39     	
;;;40     	if(StartAddr < 0x1fff0000)
00000a  480e              LDR      r0,|L1.68|
00000c  4284              CMP      r4,r0
00000e  d214              BCS      |L1.58|
;;;41     	{
;;;42     		while(StartAddr < EndAddr)
000010  e010              B        |L1.52|
                  |L1.18|
;;;43     		{
;;;44     			if(STM32F4FLASH_ReadWord(StartAddr) != 0xffffffff)
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       STM32F4FLASH_ReadWord
000018  1c40              ADDS     r0,r0,#1
00001a  b150              CBZ      r0,|L1.50|
;;;45     			{
;;;46     				status = FLASH_EraseSector(STM32F4FLASH_GetFlashSector(StartAddr),VoltageRange_3);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       STM32F4FLASH_GetFlashSector
000022  4607              MOV      r7,r0
000024  2102              MOVS     r1,#2
000026  f7fffffe          BL       FLASH_EraseSector
00002a  4606              MOV      r6,r0
;;;47     				if(status != FLASH_COMPLETE)
00002c  2e09              CMP      r6,#9
00002e  d001              BEQ      |L1.52|
;;;48     					break;
000030  e002              B        |L1.56|
                  |L1.50|
;;;49     			}
;;;50     			else
;;;51     				StartAddr+=4;
000032  1d24              ADDS     r4,r4,#4
                  |L1.52|
000034  42ac              CMP      r4,r5                 ;42
000036  d3ec              BCC      |L1.18|
                  |L1.56|
000038  e000              B        |L1.60|
                  |L1.58|
;;;52     		}
;;;53     	}
;;;54     	else
;;;55     	{
;;;56     		status = FLASH_ERROR_PGS;
00003a  2603              MOVS     r6,#3
                  |L1.60|
;;;57     	}
;;;58     	return status;
00003c  4630              MOV      r0,r6
;;;59     }
00003e  e8bd81f0          POP      {r4-r8,pc}
;;;60     
                          ENDP

000042  0000              DCW      0x0000
                  |L1.68|
                          DCD      0x1fff0000

                          AREA ||i.STM32F4FLASH_GetFlashSector||, CODE, READONLY, ALIGN=2

                  STM32F4FLASH_GetFlashSector PROC
;;;8      
;;;9      u32 STM32F4FLASH_GetFlashSector(u32 addr)
000000  4601              MOV      r1,r0
;;;10     {
;;;11     	if(addr < ADDR_FLASH_SECTOR_1)
000002  481c              LDR      r0,|L2.116|
000004  4281              CMP      r1,r0
000006  d201              BCS      |L2.12|
;;;12     		return FLASH_Sector_0;
000008  2000              MOVS     r0,#0
                  |L2.10|
;;;13     	else if(addr < ADDR_FLASH_SECTOR_2)
;;;14     		return FLASH_Sector_1;
;;;15     	else if(addr < ADDR_FLASH_SECTOR_3)
;;;16     		return FLASH_Sector_2;
;;;17     	else if(addr < ADDR_FLASH_SECTOR_4)
;;;18     		return FLASH_Sector_3;
;;;19     	else if(addr < ADDR_FLASH_SECTOR_5)
;;;20     		return FLASH_Sector_4;
;;;21     	else if(addr < ADDR_FLASH_SECTOR_6)
;;;22     		return FLASH_Sector_5;
;;;23     	else if(addr < ADDR_FLASH_SECTOR_7)
;;;24     		return FLASH_Sector_6;
;;;25     	else if(addr < ADDR_FLASH_SECTOR_8)
;;;26     		return FLASH_Sector_7;
;;;27     	else if(addr < ADDR_FLASH_SECTOR_9)
;;;28     		return FLASH_Sector_8;
;;;29     	else if(addr < ADDR_FLASH_SECTOR_10)
;;;30     		return FLASH_Sector_9;
;;;31     	else if(addr < ADDR_FLASH_SECTOR_11)
;;;32     		return FLASH_Sector_10;
;;;33     	else return FLASH_Sector_11;
;;;34     }
00000a  4770              BX       lr
                  |L2.12|
00000c  481a              LDR      r0,|L2.120|
00000e  4281              CMP      r1,r0                 ;13
000010  d201              BCS      |L2.22|
000012  2008              MOVS     r0,#8                 ;14
000014  e7f9              B        |L2.10|
                  |L2.22|
000016  4819              LDR      r0,|L2.124|
000018  4281              CMP      r1,r0                 ;15
00001a  d201              BCS      |L2.32|
00001c  2010              MOVS     r0,#0x10              ;16
00001e  e7f4              B        |L2.10|
                  |L2.32|
000020  4817              LDR      r0,|L2.128|
000022  4281              CMP      r1,r0                 ;17
000024  d201              BCS      |L2.42|
000026  2018              MOVS     r0,#0x18              ;18
000028  e7ef              B        |L2.10|
                  |L2.42|
00002a  4816              LDR      r0,|L2.132|
00002c  4281              CMP      r1,r0                 ;19
00002e  d201              BCS      |L2.52|
000030  2020              MOVS     r0,#0x20              ;20
000032  e7ea              B        |L2.10|
                  |L2.52|
000034  4814              LDR      r0,|L2.136|
000036  4281              CMP      r1,r0                 ;21
000038  d201              BCS      |L2.62|
00003a  2028              MOVS     r0,#0x28              ;22
00003c  e7e5              B        |L2.10|
                  |L2.62|
00003e  4813              LDR      r0,|L2.140|
000040  4281              CMP      r1,r0                 ;23
000042  d201              BCS      |L2.72|
000044  2030              MOVS     r0,#0x30              ;24
000046  e7e0              B        |L2.10|
                  |L2.72|
000048  4811              LDR      r0,|L2.144|
00004a  4281              CMP      r1,r0                 ;25
00004c  d201              BCS      |L2.82|
00004e  2038              MOVS     r0,#0x38              ;26
000050  e7db              B        |L2.10|
                  |L2.82|
000052  4810              LDR      r0,|L2.148|
000054  4281              CMP      r1,r0                 ;27
000056  d201              BCS      |L2.92|
000058  2040              MOVS     r0,#0x40              ;28
00005a  e7d6              B        |L2.10|
                  |L2.92|
00005c  480e              LDR      r0,|L2.152|
00005e  4281              CMP      r1,r0                 ;29
000060  d201              BCS      |L2.102|
000062  2048              MOVS     r0,#0x48              ;30
000064  e7d1              B        |L2.10|
                  |L2.102|
000066  480d              LDR      r0,|L2.156|
000068  4281              CMP      r1,r0                 ;31
00006a  d201              BCS      |L2.112|
00006c  2050              MOVS     r0,#0x50              ;32
00006e  e7cc              B        |L2.10|
                  |L2.112|
000070  2058              MOVS     r0,#0x58              ;33
000072  e7ca              B        |L2.10|
;;;35     
                          ENDP

                  |L2.116|
                          DCD      0x08004000
                  |L2.120|
                          DCD      0x08008000
                  |L2.124|
                          DCD      0x0800c000
                  |L2.128|
                          DCD      0x08010000
                  |L2.132|
                          DCD      0x08020000
                  |L2.136|
                          DCD      0x08040000
                  |L2.140|
                          DCD      0x08060000
                  |L2.144|
                          DCD      0x08080000
                  |L2.148|
                          DCD      0x080a0000
                  |L2.152|
                          DCD      0x080c0000
                  |L2.156|
                          DCD      0x080e0000

                          AREA ||i.STM32F4FLASH_Read||, CODE, READONLY, ALIGN=1

                  STM32F4FLASH_Read PROC
;;;102    
;;;103    void STM32F4FLASH_Read(u32 ReadAddr,u32 *pBuffer,u32 NumToRead)
000000  b510              PUSH     {r4,lr}
;;;104    {
000002  4604              MOV      r4,r0
000004  460b              MOV      r3,r1
;;;105    	while(NumToRead--)
000006  e005              B        |L3.20|
                  |L3.8|
;;;106    	{
;;;107    		*pBuffer=STM32F4FLASH_ReadWord(ReadAddr);
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       STM32F4FLASH_ReadWord
00000e  6018              STR      r0,[r3,#0]
;;;108    		pBuffer++;
000010  1d1b              ADDS     r3,r3,#4
;;;109    		ReadAddr+=4;
000012  1d24              ADDS     r4,r4,#4
                  |L3.20|
000014  1e10              SUBS     r0,r2,#0              ;105
000016  f1a20201          SUB      r2,r2,#1              ;105
00001a  d1f5              BNE      |L3.8|
;;;110    	}
;;;111    }
00001c  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i.STM32F4FLASH_ReadWord||, CODE, READONLY, ALIGN=1

                  STM32F4FLASH_ReadWord PROC
;;;3      
;;;4      u32 STM32F4FLASH_ReadWord(u32 FlashAddr)
000000  4601              MOV      r1,r0
;;;5      {
;;;6      	return *(vu32*)FlashAddr;
000002  6808              LDR      r0,[r1,#0]
;;;7      }
000004  4770              BX       lr
;;;8      
                          ENDP


                          AREA ||i.STM32F4FLASH_Write||, CODE, READONLY, ALIGN=1

                  STM32F4FLASH_Write PROC
;;;60     
;;;61     void STM32F4FLASH_Write(u32 WriteAddr,u32 *pBuffer,u32 NumToWrite)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;62     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;63     	FLASH_Status status = FLASH_COMPLETE;
00000a  f04f0809          MOV      r8,#9
;;;64     	u32 endaddr=0;
00000e  2700              MOVS     r7,#0
;;;65     	
;;;66     	if(WriteAddr<STM32_FLASH_BASE || WriteAddr%4)
000010  f1b46f00          CMP      r4,#0x8000000
000014  d302              BCC      |L5.28|
000016  f0040003          AND      r0,r4,#3
00001a  b108              CBZ      r0,|L5.32|
                  |L5.28|
;;;67     		return;
;;;68     	FLASH_Unlock();
;;;69     	FLASH_DataCacheCmd(DISABLE);
;;;70     	
;;;71     	endaddr = WriteAddr+NumToWrite*4;
;;;72     //	if(addrx < 0x1fff0000)
;;;73     //	{
;;;74     //		while(addrx<endaddr)
;;;75     //		{
;;;76     //			if(STM32F4FLASH_ReadWord(addrx) != 0xffffffff)
;;;77     //			{
;;;78     //				status = FLASH_EraseSector(STM32F4FLASH_GetFlashSector(addrx),VoltageRange_3);
;;;79     //				if(status != FLASH_COMPLETE)
;;;80     //					break;
;;;81     //			}
;;;82     //			else
;;;83     //				addrx+=4;
;;;84     //		}
;;;85     //	}
;;;86     	status = STM32F4FLASH_CheckEmpty(WriteAddr,endaddr);
;;;87     	if(status == FLASH_COMPLETE)
;;;88     	{
;;;89     		while(WriteAddr < endaddr)
;;;90     		{
;;;91     			if(FLASH_ProgramWord(WriteAddr,*pBuffer) != FLASH_COMPLETE)
;;;92     			{
;;;93     				break;
;;;94     			}
;;;95     			WriteAddr+=4;
;;;96     			pBuffer++;
;;;97     		}
;;;98     	}
;;;99     	FLASH_DataCacheCmd(DISABLE);
;;;100    	FLASH_Lock();
;;;101    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L5.32|
000020  f7fffffe          BL       FLASH_Unlock
000024  2000              MOVS     r0,#0                 ;69
000026  f7fffffe          BL       FLASH_DataCacheCmd
00002a  eb040786          ADD      r7,r4,r6,LSL #2       ;71
00002e  4639              MOV      r1,r7                 ;86
000030  4620              MOV      r0,r4                 ;86
000032  f7fffffe          BL       STM32F4FLASH_CheckEmpty
000036  4680              MOV      r8,r0                 ;86
000038  f1b80f09          CMP      r8,#9                 ;87
00003c  d10c              BNE      |L5.88|
00003e  e008              B        |L5.82|
                  |L5.64|
000040  4620              MOV      r0,r4                 ;91
000042  6829              LDR      r1,[r5,#0]            ;91
000044  f7fffffe          BL       FLASH_ProgramWord
000048  2809              CMP      r0,#9                 ;91
00004a  d000              BEQ      |L5.78|
00004c  e003              B        |L5.86|
                  |L5.78|
00004e  1d24              ADDS     r4,r4,#4              ;95
000050  1d2d              ADDS     r5,r5,#4              ;96
                  |L5.82|
000052  42bc              CMP      r4,r7                 ;89
000054  d3f4              BCC      |L5.64|
                  |L5.86|
000056  bf00              NOP                            ;93
                  |L5.88|
000058  2000              MOVS     r0,#0                 ;99
00005a  f7fffffe          BL       FLASH_DataCacheCmd
00005e  f7fffffe          BL       FLASH_Lock
000062  bf00              NOP      
000064  e7da              B        |L5.28|
;;;102    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\bsp_stm32f4flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_bsp_stm32f4flash_c_fc365f48____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_bsp_stm32f4flash_c_fc365f48____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_bsp_stm32f4flash_c_fc365f48____REVSH|
#line 144
|__asm___18_bsp_stm32f4flash_c_fc365f48____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_bsp_stm32f4flash_c_fc365f48____RRX|
#line 300
|__asm___18_bsp_stm32f4flash_c_fc365f48____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
