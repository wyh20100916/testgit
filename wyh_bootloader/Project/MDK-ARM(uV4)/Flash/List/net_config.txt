; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\net_config.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\net_config.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\RL-ARM\Driver -I..\..\RL-ARM\Config -I..\..\RL-ARM\RL-RTX\inc -I..\..\User\libapp -I..\..\User\bsp\inc -I..\..\User\bsp -I..\..\User -I..\..\Libraries\STM32_USB_Device_Library\Class\dfu\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -D__MICROLIB -D__UVISION_VERSION=518 -D_RTE_ -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\net_config.crf ..\..\RL-ARM\Config\Net_Config.c]
                          THUMB

                          AREA ||i.dhcp_disable||, CODE, READONLY, ALIGN=1

                  dhcp_disable PROC
;;;584    /* Empty function when DHCP not enabled. */
;;;585    void dhcp_disable (void)             { ; }
000000  4770              BX       lr
;;;586    #endif
                          ENDP


                          AREA ||i.igmp_is_member||, CODE, READONLY, ALIGN=1

                  igmp_is_member PROC
;;;578    /* Empty functions when IP Multicasting is not enabled. */
;;;579    BOOL igmp_is_member (U8 *ipadr)      { return (__FALSE); }
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;580    void igmp_process (OS_FRAME *frame)  { ; }
                          ENDP


                          AREA ||i.igmp_process||, CODE, READONLY, ALIGN=1

                  igmp_process PROC
;;;579    BOOL igmp_is_member (U8 *ipadr)      { return (__FALSE); }
;;;580    void igmp_process (OS_FRAME *frame)  { ; }
000000  4770              BX       lr
;;;581    #endif
                          ENDP


                          AREA ||i.init_system||, CODE, READONLY, ALIGN=1

                  init_system PROC
;;;389    
;;;390    void init_system (void) {
000000  b510              PUSH     {r4,lr}
;;;391      /* Initialize configured interfaces and applications. */
;;;392    
;;;393    #if (ETH_ENABLE)
;;;394      eth_init_link ();
000002  f7fffffe          BL       eth_init_link
;;;395    #endif
;;;396    #if (PPP_ENABLE)
;;;397      ppp_init_link ();
;;;398    #endif
;;;399    #if (SLIP_ENABLE)
;;;400      slip_init_link ();
;;;401    #endif
;;;402      ip_init ();
000006  f7fffffe          BL       ip_init
;;;403      icmp_init ();
00000a  f7fffffe          BL       icmp_init
;;;404    #if (ETH_ENABLE && IGMP_ENABLE)
;;;405      igmp_init ();
;;;406    #endif
;;;407    #if (UDP_ENABLE)
;;;408      udp_init ();
00000e  f7fffffe          BL       udp_init
;;;409    #endif
;;;410    #if (TCP_ENABLE)
;;;411      tcp_init ();
000012  f7fffffe          BL       tcp_init
;;;412    #endif
;;;413    #if (BSD_ENABLE)
;;;414      bsd_init ();
;;;415     #if (BSD_GETHOSTEN)
;;;416      bsd_init_host ();
;;;417     #endif
;;;418    #endif
;;;419    #if (HTTP_ENABLE)
;;;420      http_init ();
;;;421    #endif
;;;422    #if (TNET_ENABLE)
;;;423      tnet_init ();
;;;424    #endif
;;;425    #if (TFTP_ENABLE)
;;;426      tftp_init ();
;;;427    #endif
;;;428    #if (TFTPC_ENABLE)
;;;429      tftpc_init ();
;;;430    #endif
;;;431    #if (FTP_ENABLE)
;;;432      ftp_init ();
;;;433    #endif
;;;434    #if (FTPC_ENABLE)
;;;435      ftpc_init ();
;;;436    #endif
;;;437    #if (ETH_ENABLE && NBNS_ENABLE)
;;;438      nbns_init ();
000016  f7fffffe          BL       nbns_init
;;;439    #endif
;;;440    #if (ETH_ENABLE && DHCP_ENABLE)
;;;441      dhcp_init ();
;;;442    #elif (ETH_ENABLE)
;;;443      arp_notify ();
00001a  e8bd4010          POP      {r4,lr}
00001e  f7ffbffe          B.W      arp_notify
;;;444    #endif
;;;445    #if (DNS_ENABLE)
;;;446      dns_init ();
;;;447    #endif
;;;448    #if (SMTP_ENABLE)
;;;449      smtp_init ();
;;;450    #endif
;;;451    #if (SNMP_ENABLE)
;;;452      snmp_init ();
;;;453    #endif
;;;454    #if (SNTP_ENABLE)
;;;455      sntp_init ();
;;;456    #endif
;;;457    
;;;458    #if (BSD_ENABLE && __RTX)
;;;459      os_mut_init (bsd_mutex);
;;;460    #endif
;;;461    }
;;;462    
                          ENDP


                          AREA ||i.ppp_send_frame||, CODE, READONLY, ALIGN=1

                  ppp_send_frame PROC
;;;589    /* Empty function when PPP Interface is disabled. */
;;;590    BOOL ppp_send_frame (OS_FRAME *frame, U16 prot) { return (__FALSE); }
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;591    #endif
                          ENDP


                          AREA ||i.run_system||, CODE, READONLY, ALIGN=1

                  run_system PROC
;;;465    
;;;466    void run_system (void) {
000000  b510              PUSH     {r4,lr}
;;;467      /* Run configured interfaces and applications. */
;;;468    
;;;469    #if (BSD_ENABLE && __RTX)
;;;470      os_mut_wait (bsd_mutex, 0xFFFF);
;;;471    #endif
;;;472    
;;;473    #if (ETH_ENABLE)
;;;474      eth_run_link ();
000002  f7fffffe          BL       eth_run_link
;;;475    #endif
;;;476    #if (PPP_ENABLE)
;;;477      ppp_run_link ();
;;;478    #endif
;;;479    #if (SLIP_ENABLE)
;;;480      slip_run_link ();
;;;481    #endif
;;;482      ip_run_local ();
000006  f7fffffe          BL       ip_run_local
;;;483      icmp_run_engine ();
00000a  f7fffffe          BL       icmp_run_engine
;;;484    #if (ETH_ENABLE && IGMP_ENABLE)
;;;485      igmp_run_host ();
;;;486    #endif
;;;487    #if (TCP_ENABLE)
;;;488      tcp_poll_sockets ();
00000e  e8bd4010          POP      {r4,lr}
000012  f7ffbffe          B.W      tcp_poll_sockets
;;;489    #endif
;;;490    #if (BSD_ENABLE)
;;;491      bsd_poll_sockets ();
;;;492    #endif
;;;493    #if (HTTP_ENABLE)
;;;494      http_run_server ();
;;;495    #endif
;;;496    #if (TNET_ENABLE)
;;;497      tnet_run_server ();
;;;498    #endif
;;;499    #if (TFTP_ENABLE)
;;;500      tftp_run_server ();
;;;501    #endif
;;;502    #if (TFTPC_ENABLE)
;;;503      tftpc_run_client ();
;;;504    #endif
;;;505    #if (FTP_ENABLE)
;;;506      ftp_run_server ();
;;;507    #endif
;;;508    #if (FTPC_ENABLE)
;;;509      ftpc_run_client ();
;;;510    #endif
;;;511    #if (ETH_ENABLE && DHCP_ENABLE)
;;;512      dhcp_run_client ();
;;;513    #endif
;;;514    #if (DNS_ENABLE)
;;;515      dns_run_client ();
;;;516    #endif
;;;517    #if (SMTP_ENABLE)
;;;518      smtp_run_client ();
;;;519    #endif
;;;520    #if (SNMP_ENABLE)
;;;521      snmp_run_agent ();
;;;522    #endif
;;;523    #if (SNTP_ENABLE)
;;;524      sntp_run_client ();
;;;525    #endif
;;;526    
;;;527    #if (BSD_ENABLE && __RTX)
;;;528      os_mut_release (bsd_mutex);
;;;529    #endif
;;;530    }
;;;531    
                          ENDP


                          AREA ||i.slip_send_frame||, CODE, READONLY, ALIGN=1

                  slip_send_frame PROC
;;;608    /* Empty function when SLIP Interface is disabled. */
;;;609    BOOL slip_send_frame (OS_FRAME *frame) { return (__FALSE); }
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;610    #endif
                          ENDP


                          AREA ||i.sntp_get_time||, CODE, READONLY, ALIGN=1

                  sntp_get_time PROC
;;;623    /* Empty function when SNTP not enabled. */
;;;624    BOOL sntp_get_time (U8 *ipadr, void (*cbfunc)(U32)) { return(__FALSE); }
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;625    #endif
                          ENDP


                          AREA ||i.sys_error||, CODE, READONLY, ALIGN=1

                  sys_error PROC
;;;881    
;;;882    void sys_error (ERROR_CODE code) {
000000  2807              CMP      r0,#7
;;;883      /* This function is called when a fatal error is encountered. The normal */
;;;884      /* program execution is not possible anymore. Add your crytical error   .*/
;;;885      /* handler code here.                                                    */
;;;886    
;;;887      switch (code) {
000002  d20c              BCS      |L9.30|
000004  e8dff000          TBB      [pc,r0]
000008  04050607          DCB      0x04,0x05,0x06,0x07
00000c  08090a00          DCB      0x08,0x09,0x0a,0x00
;;;888        case ERR_MEM_ALLOC:
;;;889          /* Out of memory. */
;;;890          break;
000010  e005              B        |L9.30|
;;;891    
;;;892        case ERR_MEM_FREE:
;;;893          /* Trying to release non existing memory block. */
;;;894          break;
000012  e004              B        |L9.30|
;;;895    
;;;896        case ERR_MEM_CORRUPT:
;;;897          /* Memory Link pointer is Corrupted. */
;;;898          /* More data written than the size of allocated mem block. */
;;;899          break;
000014  e003              B        |L9.30|
;;;900    
;;;901        case ERR_MEM_LOCK:
;;;902          /* Locked Memory management function (alloc/free) re-entered. */
;;;903          /* RTX multithread protection malfunctioning, not implemented */
;;;904          /* or interrupt disable is not functioning correctly. */
;;;905          break;
000016  e002              B        |L9.30|
;;;906    
;;;907        case ERR_UDP_ALLOC:
;;;908          /* Out of UDP Sockets. */
;;;909          break;
000018  e001              B        |L9.30|
;;;910    
;;;911        case ERR_TCP_ALLOC:
;;;912          /* Out of TCP Sockets. */
;;;913          break;
00001a  e000              B        |L9.30|
;;;914    
;;;915        case ERR_TCP_STATE:
;;;916          /* TCP State machine in undefined state. */
;;;917          break;
00001c  bf00              NOP      
                  |L9.30|
00001e  bf00              NOP                            ;890
;;;918      }
;;;919    
;;;920      /* End-less loop */
;;;921      while (1);
000020  bf00              NOP      
                  |L9.34|
000022  e7fe              B        |L9.34|
;;;922    }
;;;923    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  mem_pool
                          %        8192
                  arp_table
                          %        140
                  udp_scb
                          %        24
                  tcp_scb
                          %        136

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  nlocalm
000000  c0a85064          DCB      0xc0,0xa8,0x50,0x64
000004  c0a80101          DCB      0xc0,0xa8,0x01,0x01
000008  ffffff00          DCB      0xff,0xff,0xff,0x00
00000c  c2190281          DCB      0xc2,0x19,0x02,0x81
000010  c2190282          DCB      0xc2,0x19,0x02,0x82
000014  00000000          DCB      0x00,0x00,0x00,0x00
000018  00000000          DCB      0x00,0x00,0x00,0x00
00001c  00000000          DCB      0x00,0x00,0x00,0x00
000020  00000000          DCB      0x00,0x00,0x00,0x00
000024  00000000          DCB      0x00,0x00,0x00,0x00
000028  00000000          DCB      0x00,0x00,0x00,0x00
00002c  00000000          DCB      0x00,0x00,0x00,0x00
000030  00000000          DCB      0x00,0x00,0x00,0x00
000034  00000000          DCB      0x00,0x00,0x00,0x00
000038  00000000          DCB      0x00,0x00,0x00,0x00
                  sys_config
                          DCD      mem_pool
                          DCD      0x00002000
000044  0a640239          DCB      0x0a,0x64,0x02,0x39
                          DCD      lhost_name
                  arp_config
                          DCD      arp_table
000050  0a960402          DCB      0x0a,0x96,0x04,0x02
000054  00000000          DCB      0x00,0x00,0x00,0x00
                  udp_config
                          DCD      udp_scb
00005c  02000000          DCB      0x02,0x00,0x00,0x00
                  tcp_config
                          DCD      tcp_scb
000064  0205              DCB      0x02,0x05
000066  0028              DCW      0x0028
000068  00020014          DCW      0x0002,0x0014
00006c  000a0078          DCW      0x000a,0x0078
000070  05b4111c          DCW      0x05b4,0x111c
000074  07000000          DCB      0x07,0x00,0x00,0x00

                          AREA ||.data||, DATA, ALIGN=0

                  lhost_name
000000  61726d66          DCB      0x61,0x72,0x6d,0x66
000004  6c790000          DCB      0x6c,0x79,0x00,0x00
                          %        8
                  own_hw_adr
000010  1e306ca2          DCB      0x1e,0x30,0x6c,0xa2
000014  455e              DCB      0x45,0x5e
