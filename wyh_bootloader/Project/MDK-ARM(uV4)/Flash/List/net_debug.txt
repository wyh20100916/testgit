; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\net_debug.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\net_debug.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\RL-ARM\Driver -I..\..\RL-ARM\Config -I..\..\RL-ARM\RL-RTX\inc -I..\..\User\libapp -I..\..\User\bsp\inc -I..\..\User\bsp -I..\..\User -I..\..\Libraries\STM32_USB_Device_Library\Class\dfu\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -D__MICROLIB -D__UVISION_VERSION=518 -D_RTE_ -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\net_debug.crf ..\..\RL-ARM\Config\Net_Debug.c]
                          THUMB

                          AREA ||i.__debug__||, CODE, READONLY, ALIGN=1

                  __debug__ PROC
;;;665    
;;;666    void __debug__ (U32 proc, const char *fmt, ...) {
000000  4770              BX       lr
;;;667      /* Print TCPnet Debug messages. */
;;;668      va_list args;
;;;669    
;;;670      switch (proc) {
;;;671    #if (DBG_MEM > 1)
;;;672        case MODULE_MEM:  break;
;;;673    #endif
;;;674    #if (DBG_ETH > 1)
;;;675        case MODULE_ETH:  break;
;;;676    #endif
;;;677    #if (DBG_PPP > 1)
;;;678        case MODULE_PPP:  break;
;;;679    #endif
;;;680    #if (DBG_SLIP > 1)
;;;681        case MODULE_SLIP: break;
;;;682    #endif
;;;683    #if (DBG_ARP > 1)
;;;684        case MODULE_ARP:  break;
;;;685    #endif
;;;686    #if (DBG_IP > 1)
;;;687        case MODULE_IP:   break;
;;;688    #endif
;;;689    #if (DBG_ICMP > 1)
;;;690        case MODULE_ICMP: break;
;;;691    #endif
;;;692    #if (DBG_IGMP > 1)
;;;693        case MODULE_IGMP: break;
;;;694    #endif
;;;695    #if (DBG_UDP > 1)
;;;696        case MODULE_UDP:  break;
;;;697    #endif
;;;698    #if (DBG_TCP > 1)
;;;699        case MODULE_TCP:  break;
;;;700    #endif
;;;701    #if (DBG_NBNS > 1)
;;;702        case MODULE_NBNS: break;
;;;703    #endif
;;;704    #if (DBG_DHCP > 1)
;;;705        case MODULE_DHCP: break;
;;;706    #endif
;;;707    #if (DBG_DNS > 1)
;;;708        case MODULE_DNS:  break;
;;;709    #endif
;;;710    #if (DBG_SNMP > 1)
;;;711        case MODULE_SNMP: break;
;;;712    #endif
;;;713    #if (DBG_BSD > 1)
;;;714        case MODULE_BSD:  break;
;;;715    #endif
;;;716    #if (DBG_HTTP > 1)
;;;717        case MODULE_HTTP: break;
;;;718    #endif
;;;719    #if (DBG_FTP > 1)
;;;720        case MODULE_FTP:  break;
;;;721    #endif
;;;722    #if (DBG_FTPC > 1)
;;;723        case MODULE_FTPC: break;
;;;724    #endif
;;;725    #if (DBG_TNET > 1)
;;;726        case MODULE_TNET: break;
;;;727    #endif
;;;728    #if (DBG_TFTP > 1)
;;;729        case MODULE_TFTP: break;
;;;730    #endif
;;;731    #if (DBG_TFTPC > 1)
;;;732        case MODULE_TFTPC:break;
;;;733    #endif
;;;734    #if (DBG_SMTP > 1)
;;;735        case MODULE_SMTP: break;
;;;736    #endif
;;;737    #if (DBG_SNTP > 1)
;;;738        case MODULE_SNTP: break;
;;;739    #endif
;;;740        default: return;
;;;741      }
;;;742    #if (DBG_TIME)
;;;743      printf (dbg_time());
;;;744    #endif
;;;745      printf ("%s:",dbg_proc(proc));
;;;746    
;;;747      va_start (args,fmt);
;;;748      vprintf (fmt,args);
;;;749      va_end (args);
;;;750    }
;;;751    
                          ENDP


                          AREA ||i.__error__||, CODE, READONLY, ALIGN=1

                  __error__ PROC
;;;754    
;;;755    void __error__ (U32 proc, const char *fmt, ...) {
000000  4770              BX       lr
;;;756      /* Print TCPnet Error messages. */
;;;757      va_list args;
;;;758    
;;;759      switch (proc) {
;;;760    #if (DBG_MEM > 0)
;;;761        case MODULE_MEM:  break;
;;;762    #endif
;;;763    #if (DBG_ETH > 0)
;;;764        case MODULE_ETH:  break;
;;;765    #endif
;;;766    #if (DBG_PPP > 0)
;;;767        case MODULE_PPP:  break;
;;;768    #endif
;;;769    #if (DBG_SLIP > 0)
;;;770        case MODULE_SLIP: break;
;;;771    #endif
;;;772    #if (DBG_ARP > 0)
;;;773        case MODULE_ARP:  break;
;;;774    #endif
;;;775    #if (DBG_IP > 0)
;;;776        case MODULE_IP:   break;
;;;777    #endif
;;;778    #if (DBG_ICMP > 0)
;;;779        case MODULE_ICMP: break;
;;;780    #endif
;;;781    #if (DBG_IGMP > 0)
;;;782        case MODULE_IGMP: break;
;;;783    #endif
;;;784    #if (DBG_UDP > 0)
;;;785        case MODULE_UDP:  break;
;;;786    #endif
;;;787    #if (DBG_TCP > 0)
;;;788        case MODULE_TCP:  break;
;;;789    #endif
;;;790    #if (DBG_NBNS > 0)
;;;791        case MODULE_NBNS: break;
;;;792    #endif
;;;793    #if (DBG_DHCP > 0)
;;;794        case MODULE_DHCP: break;
;;;795    #endif
;;;796    #if (DBG_DNS > 0)
;;;797        case MODULE_DNS:  break;
;;;798    #endif
;;;799    #if (DBG_SNMP > 0)
;;;800        case MODULE_SNMP: break;
;;;801    #endif
;;;802    #if (DBG_BSD > 0)
;;;803        case MODULE_BSD:  break;
;;;804    #endif
;;;805    #if (DBG_HTTP > 0)
;;;806        case MODULE_HTTP: break;
;;;807    #endif
;;;808    #if (DBG_FTP > 0)
;;;809        case MODULE_FTP:  break;
;;;810    #endif
;;;811    #if (DBG_FTPC > 0)
;;;812        case MODULE_FTPC: break;
;;;813    #endif
;;;814    #if (DBG_TNET > 0)
;;;815        case MODULE_TNET: break;
;;;816    #endif
;;;817    #if (DBG_TFTP > 0)
;;;818        case MODULE_TFTP: break;
;;;819    #endif
;;;820    #if (DBG_TFTPC > 0)
;;;821        case MODULE_TFTPC:break;
;;;822    #endif
;;;823    #if (DBG_SMTP > 0)
;;;824        case MODULE_SMTP: break;
;;;825    #endif
;;;826    #if (DBG_SNTP > 0)
;;;827        case MODULE_SNTP: break;
;;;828    #endif
;;;829        default: return;
;;;830      }
;;;831    #if (DBG_TIME)
;;;832      printf (dbg_time());
;;;833    #endif
;;;834      printf ("%s-ERR:",dbg_proc(proc));
;;;835    
;;;836      va_start (args,fmt);
;;;837      vprintf (fmt,args);
;;;838      va_end (args);
;;;839    }
;;;840    
                          ENDP


                          AREA ||i.init_debug||, CODE, READONLY, ALIGN=1

                  init_debug PROC
;;;124    
;;;125    void init_debug (void) {
000000  4770              BX       lr
;;;126      /* Add your code to initialize the Debug output. This is usually the  */
;;;127      /* serial interface. The function is called at TCPnet system startup. */
;;;128      /* You may need to customize also the 'putchar()' function.           */
;;;129    
;;;130    }
;;;131    
                          ENDP

